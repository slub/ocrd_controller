name: Publish OCR-D Controller

on:
  workflow_dispatch:
    inputs:
      checkout-ref:
        description: The branch, tag or SHA to checkout. Otherwise, uses the default branch.
      image-tag:
        description: Tag name of Docker image
        default: 'latest'
      ocrd-all-version: 
        description: Tag of ocrd/all from stage
        default: 'maximum-git'
        
env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  BASE_NAME: ocrd/all:${{ github.event.inputs.ocrd-all-version }}

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps: 
    - name: Remove unwanted to provide more disk space
      # https://github.com/marketplace/actions/maximize-build-disk-space
      # https://github.com/actions/runner-images/issues/2840
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
    
    - name: Checkout without input reference (default)
      uses: actions/checkout@v3
      if: github.event.inputs.checkout-ref == ''
    
    - name: Checkout input reference ${{ github.event.inputs.checkout-ref }}
      uses: actions/checkout@v3
      if: github.event.inputs.checkout-ref != ''
      with:
        ref: ${{ github.event.inputs.checkout-ref }}

    - name: Configure environment
      run: |
        date -u +"build_date=%Y-%m-%dT%H:%M:%SZ" >> $GITHUB_ENV
        echo "vcs_ref=`git rev-parse --short HEAD`" >> $GITHUB_ENV
        echo "base_digest=`docker image inspect  --format '{{.Id}}' ${{ env.BASE_NAME }}`" >> $GITHUB_ENV
        echo "cache_key=${{ github.event.inputs.image-tag }}-${{ github.event.inputs.ocrd-all-version }}-${{ env.vcs_ref }}" >> $GITHUB_ENV # (input image-tag - ocrd-all-version - vcs_ref)
        echo "${{ env.vcs_ref }}" > /tmp/${{ github.event.inputs.image-tag }}-vcs-ref # temporary file to fill cache

    - name: Get cache key "${{ env.cache_key }}"
      uses: actions/cache/restore@v3
      id: cache
      with:
        path: /tmp/${{ github.event.inputs.image-tag }}-vcs-ref
        key: ${{ env.cache_key }}
        lookup-only: true

    - # Activate cache export feature to reduce build time of images
      name: Set up Docker Buildx
      if: steps.cache.outputs.cache-hit != 'true'
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      if: steps.cache.outputs.cache-hit != 'true'
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Generate image metadata
      if: steps.cache.outputs.cache-hit != 'true'
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.IMAGE_NAME }}
        labels: |
          org.opencontainers.image.title=OCR-D Controller
          org.opencontainers.image.source=${{ github.repositoryUrl }}
          org.opencontainers.image.version=${{ github.event.inputs.image-tag }}
          org.opencontainers.image.revision=${{ env.vcs_ref }}
          org.opencontainers.image.created=${{ env.build_date }}
          org.opencontainers.image.base.name=${{ env.BASE_NAME }}
          org.opencontainers.image.base.digest=${{ env.base_digest }}
        tags: ${{ github.event.inputs.image-tag }}

    - name: Build the OCR-D Controller image "${{ env.IMAGE_NAME }}:${{ github.event.inputs.image-tag }}" and deploy to GitHub Container Repository
      if: steps.cache.outputs.cache-hit != 'true'
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_DATE=${{ env.build_date }}
          VCS_REF=${{ env.vcs_ref }}
          VERSION=${{ github.event.inputs.ocrd-all-version }}
        # Don't use cache cause ocrd/all from stage is to large
        #cache-from: type=gha 
        #cache-to: type=gha,mode=min
        
    - name: Save cache key "${{ env.cache_key }}" 
      uses: actions/cache/save@v3
      if: steps.cache.outputs.cache-hit != 'true'
      with:
        path: /tmp/${{ github.event.inputs.image-tag }}-vcs-ref
        key: ${{ env.cache_key }}
        
